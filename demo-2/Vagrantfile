#
# *** Demo 2
# Create two nodes and setup the 1st as a frontend webserver and the 2nd as a REST API backend
#

# vagrant centos config.vm.provider "docker" sshd
VAGRANTFILE_API_VERSION = "2"
# set docker as the default provider
ENV['VAGRANT_DEFAULT_PROVIDER'] = 'docker'
# disable parallellism so that the containers come up in order
ENV['VAGRANT_NO_PARALLEL'] = "1"
ENV['FORWARD_DOCKER_PORTS'] = "1"

unless Vagrant.has_plugin?("vagrant-docker-compose")
  system("vagrant plugin install vagrant-docker-compose")
  puts "Dependencies installed, please try the command again."
  exit
end

# URL to the base Docker image
DOCKER_IMAGE = "ghcr.io/maxotta/kiv-ds-docker:v0.9.0"
# Node definitions
BACKEND   = { :name => "backend",  :ipaddr => "10.0.1.11", :image => "ds/demo-2/backend:0.1" }
FRONTEND  = { :name => "frontend", :ipaddr => "10.0.1.12", :image => "ds/demo-2/frontend:0.1"  }

# Common configuration
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.synced_folder ".", "/vagrant", type: "rsync", rsync__exclude: ".*/"
  config.ssh.insert_key = false
  
# Definition of BACKEND
config.vm.define BACKEND[:name] do |s|
  s.vm.network "private_network", ip: BACKEND[:ipaddr]
  s.vm.hostname = BACKEND[:name]
  s.vm.provider "docker" do |d|
    d.image = BACKEND[:image]
    d.name = BACKEND[:name]
    d.has_ssh = true
  end
  s.vm.post_up_message = "Node #{BACKEND[:name]} up and running. You can access the node with 'vagrant ssh #{BACKEND[:name]}'}"
end

# Definition of FRONTEND
  config.vm.define FRONTEND[:name] do |s|
    s.vm.network "private_network", ip: FRONTEND[:ipaddr]
    # Forward port 80 in the container to port 8080 on the host machine. Listen on 0.0.0.0 (all interfaces)
    s.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "0.0.0.0"
    s.vm.hostname = FRONTEND[:name]
    s.vm.provider "docker" do |d|
      d.image = FRONTEND[:image]
      d.name = FRONTEND[:name]
      d.has_ssh = true
    end
    s.vm.post_up_message = "Node #{FRONTEND[:name]} up and running. You can access the node with 'vagrant ssh #{FRONTEND[:name]}'}"
  end

end

# EOF
